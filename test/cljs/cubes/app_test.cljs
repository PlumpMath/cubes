(ns cubes.app-test
  (:require [cljs.test :refer-macros [deftest testing is]]
            [cljs.reader :as reader]
            [cubes.app :as c]))

(def db
  (reader/read-string
   "#datascript/DB {:schema {:supports {:db/cardinality :db.cardinality/many, :db/valueType :db.type/ref}}, :datoms [[1 :b 139 536870913] [1 :g 119 536870913] [1 :r 6 536870913] [1 :side 40 536870913] [1 :x 344 536870913] [1 :y 0 536870913] [2 :b 16 536870914] [2 :g 44 536870914] [2 :r 207 536870914] [2 :side 40 536870914] [2 :x 164 536870914] [2 :y 0 536870914] [3 :b 149 536870915] [3 :g 183 536870915] [3 :r 68 536870915] [3 :side 40 536870915] [3 :x 473 536870915] [3 :y 0 536870915] [4 :b 26 536870916] [4 :g 201 536870916] [4 :r 163 536870916] [4 :side 40 536870916] [4 :supports 5 536870917] [4 :x 112 536870916] [4 :y 0 536870916] [5 :b 239 536870917] [5 :g 165 536870917] [5 :r 22 536870917] [5 :side 40 536870917] [5 :supports 10 536870922] [5 :x 112 536870917] [5 :y 40 536870917] [6 :b 1 536870918] [6 :g 76 536870918] [6 :r 172 536870918] [6 :side 40 536870918] [6 :x 30 536870918] [6 :y 0 536870918] [7 :b 143 536870919] [7 :g 59 536870919] [7 :r 42 536870919] [7 :side 40 536870919] [7 :x 428 536870919] [7 :y 0 536870919] [8 :b 158 536870920] [8 :g 0 536870920] [8 :r 49 536870920] [8 :side 40 536870920] [8 :x 549 536877671] [8 :y 40 536877671] [9 :b 195 536870921] [9 :g 236 536870921] [9 :r 210 536870921] [9 :side 40 536870921] [9 :supports 8 536877671] [9 :x 549 536870921] [9 :y 0 536870921] [10 :b 219 536870922] [10 :g 59 536870922] [10 :r 58 536870922] [10 :side 40 536870922] [10 :x 112 536870922] [10 :y 80 536870922]]}"))

(deftest plan-moves
  (let [goal [4 5]
        plan [{:type :clear, :move 10}
              {:type :clear, :move 5}
              {:type :move, :move 4, :to 5}]]
    (is (= plan (c/plan-moves goal db)))))
